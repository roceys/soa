<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
 xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<dubbo:annotation package="io.goudai" />

	<dubbo:registry protocol="zookeeper" address="127.0.0.1:8081" />


	<dubbo:provider id="providerPort" protocol="dubbo" port="30881"/>
	

	<!-- DataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="dbType" value="mysql"></property>
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<property name="maxOpenPreparedStatements" value="100" />
		<property name="removeAbandoned" value="true" /> <!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800" /> <!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true" /> <!-- 关闭abanded连接时输出错误日志 -->
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat,wall,log4j" />
		<property name="poolPreparedStatements" value="true" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis/**/*Mapper.xml</value>
			</list>
		</property>
	</bean>


	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 使用DataSourceTX -->
	<bean id="dataSourceTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="quartzProperties" ref="quartzProperties" />
	</bean>

	<util:properties id="quartzProperties">
		<prop key="org.quartz.scheduler.instanceName">soaClusteredScheduler</prop>
		<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
		<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
		<prop key="org.quartz.threadPool.threadCount">30</prop>
		<prop key="org.quartz.threadPool.threadPriority">5</prop>
		<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
		<prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop>
		<prop key="org.quartz.jobStore.useProperties">false</prop>
		<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
		<prop key="org.quartz.jobStore.isClustered">true</prop>
		<prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>
		<prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
	</util:properties>

	<bean class="io.goudai.soa.core.holder.SpringContextHolder"/>

	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="200"/>
		<property name="maxWaitMillis" value="2000"/>
	</bean>
	
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig"/>
		<constructor-arg index="1" value="172.60.1.65"/>
	</bean>
	
	<bean id="jdkSerializeImpl" class="io.goudai.soa.core.serialize.JdkSerialize"/>
	
	<bean id="redisCache" class="io.goudai.soa.core.cache.redis.RedisCacheFactoryBean">
			<property name="jedisPool" ref="jedisPool"/>
			<property name="serialize" ref="jdkSerializeImpl"/>
	</bean>
	
	<bean class="io.goudai.soa.core.cache.redis.RedisCacheManger">
			<property name="cache" ref="redisCache"/>
			<property name="transactionAware" value="true"></property>
	</bean>
	


	<!-- 启用spring 监控 -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.mysql.*</value>
			</list>
		</property>
	</bean>
	<aop:config proxy-target-class="false">
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	<util:map id="jobZookeeperMap">
		<entry key="zkaddress" value="${zkaddress}"/>
		<entry key="path" value="/quartzPath"></entry>
	</util:map>
</beans>
